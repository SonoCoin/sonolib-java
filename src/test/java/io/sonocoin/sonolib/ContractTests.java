package io.sonocoin.sonolib;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.sonocoin.sonolib.client.Client;
import io.sonocoin.sonolib.coins.Coin;
import io.sonocoin.sonolib.coins.CoinInfo;
import io.sonocoin.sonolib.crypto.HD;
import io.sonocoin.sonolib.crypto.Mnemonic;
import io.sonocoin.sonolib.crypto.Wallet;
import io.sonocoin.sonolib.dtos.TransactionRequest;
import io.sonocoin.sonolib.dtos.extended.NonceDto;
import io.sonocoin.sonolib.erc20.Erc20Transfer;
import io.sonocoin.sonolib.misc.Payload;
import io.sonocoin.sonolib.misc.Sono;
import org.junit.Test;

import java.math.BigInteger;

public class ContractTests {

    private final BigInteger gas = new BigInteger("100000000000");
    private final BigInteger fee = new BigInteger("0");
    private final BigInteger gasPrice = new BigInteger("0");
    private final BigInteger commission = new BigInteger("0");

    private final String baseAddr = "https://testnet.sonocoin.io/api/rest/v1";
    private final Client _client = new Client(baseAddr);
    private final ObjectMapper _mapper = new ObjectMapper();

    private void debug(Object x) throws JsonProcessingException {
        String json = this._mapper.writeValueAsString(x);
        System.out.println(json);
    }

    @Test
    public void deployContract() throws Exception {
        String payload = "";
        String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";
        int index = 0;
        Mnemonic mnemonic = new Mnemonic(words);

        HD hd = mnemonic.toHD(index);
        Wallet wallet = mnemonic.toWallet(index);

        BigInteger consumedFee = _client.consumedFee(wallet.base58Address, null, payload);
        NonceDto nonce = _client.getNonce(wallet.base58Address);

        // @TODO pass commission to api
        BigInteger commission = consumedFee.add(Sono.commission);

        try {
            TransactionRequest tx = new TransactionRequest()
                    .addSender(wallet.base58Address, hd, commission, nonce.unconfirmedNonce)
                    .addContractCreation(wallet.base58Address, payload, Sono.zero, commission)
                    .sign();

            assert _client.send(tx);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void erc20BalanceTest() throws Exception {
        String contract = "SXQesoQbc9dfCHnrPzoSt2fGgPppRVcBS7B";
//        String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";
//        int index = 1;
//        Mnemonic mnemonic = new Mnemonic(words);
//
//        Wallet wallet = mnemonic.toWallet(index);
        String address = "SCWTXwXKNJx6rpqEgV8eH4kGu1KmMoeBbAx";

        String payload = Erc20Transfer.getBalancePayload(contract, address);

        System.out.println(payload);

        try {
            String resp = _client.staticCall(contract, payload);
            BigInteger balance = Payload.toBi(resp);
            System.out.println(balance);
        } catch (Exception e) {
            assert e.getMessage().equals("contract failed");
        }
    }

    @Test
    public void erc20TransferTest() throws Exception {
        try {
            String contract = "SXSoYyf9NjUHsAPccaw9ZkYXkvmMCLA32yF";
            String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";

            BigInteger amount = new BigInteger("50000");

            int index = 0;
            Mnemonic mnemonic = new Mnemonic(words);
            HD hd = mnemonic.toHD(index);
            String sender = mnemonic.toWallet(index).base58Address;

            String receiver = mnemonic.toWallet(1).base58Address;

            String consumedFeePayload = Erc20Transfer.getTransferPayload(receiver, amount);
            BigInteger consumedFee = _client.consumedFee(sender, contract, consumedFeePayload);
            BigInteger nonce = _client.getNonce(sender).unconfirmedNonce;

            BigInteger commission = consumedFee.add(Sono.commission);

            try {
                TransactionRequest tx = new Erc20Transfer()
                        .addSender(sender, hd, commission, nonce)
                        .addTransfer(contract, receiver, amount, commission)
                        .sign();

                assert _client.send(tx);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } catch (Exception e) {
            assert e.getMessage().equals("contract failed");
        }
    }

    @Test
    public void coinCreateTest() throws Exception {
        String contract = "SXPnULosD1pcfYWHaVTzXWfuetYUpTZycgh";
//        String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";
        int index = 0;
//        Mnemonic mnemonic = new Mnemonic(words);
//        HD hd = mnemonic.toHD(index);
        HD hd = new HD("72747bc257a21dee39843101557d19f5f99b147ff705055a1b7b78f4f2de4a61ea0f6a7e73c3328b2a52b84dfe6ceaa0b9ba36622e8b5218fb27881d71f6574d");
        String sender = hd.toWallet().base58Address;

        BigInteger nonce = _client.getNonce(sender).unconfirmedNonce;
        BigInteger allowanceNonce = _client.getAllowanceNonce(sender).unconfirmedNonce;

        Coin coin = new Coin();

        System.out.println(coin.secretKeyHex());
        System.out.println(coin.publicKeyHex());

        BigInteger amount = new BigInteger("10");

        String payload = Coin.getCreateCoinPayload(hd, coin.publicKeyHex(), amount, allowanceNonce);

        try {
            TransactionRequest tx = new TransactionRequest()
                    .addCommission(gasPrice, gas)
                    .addSender(sender, hd, commission, nonce)
                    .addContractExecution(sender, contract, payload, Sono.zero, gas)
                    .sign();

            debug(tx);

            assert _client.send(tx);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void getCoinInfo() throws Exception {
        String contract = "SXPnULosD1pcfYWHaVTzXWfuetYUpTZycgh";
        String coinPrivKey = "9b0dd377621c7c1024db881a8879ed04eea35a09d6954cc50489d65956464dd2f3ee02b34a466eea277183760898ef5a812d3e6aaf4c2e4ed94dd15d28766c74";
        Coin coin = new Coin(coinPrivKey);

        String payload = Coin.getInfoPayload(coin.publicKeyHex());

        String resp = _client.staticCall(contract, payload);

        System.out.println(resp);

        CoinInfo info = Payload.toCoinInfo(resp);

        System.out.println(info.status);
        System.out.println(info.amount);
    }

    @Test
    public void spendCoinTest() throws Exception {
        String contract = "SXPnULosD1pcfYWHaVTzXWfuetYUpTZycgh";

        String coinPrivKey = "9b0dd377621c7c1024db881a8879ed04eea35a09d6954cc50489d65956464dd2f3ee02b34a466eea277183760898ef5a812d3e6aaf4c2e4ed94dd15d28766c74";
        Coin coin = new Coin(coinPrivKey);

        String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";
        int index = 1;
        Mnemonic mnemonic = new Mnemonic(words);
        HD hd = mnemonic.toHD(index);
        String sender = hd.toWallet().base58Address;

        BigInteger nonce = _client.getNonce(sender).unconfirmedNonce;

        String payload = Coin.getSpendCoinPayload(coin.keys, sender);
        debug(payload);

        try {
            TransactionRequest tx = new TransactionRequest()
                    .addCommission(gasPrice, gas)
                    .addSender(sender, hd, commission, nonce)
                    .addContractExecution(sender, contract, payload, Sono.zero, gas)
                    .sign();

            debug(tx);

            assert _client.send(tx);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void tokenApproveTest() throws Exception {
        String contract = "SXQesoQbc9dfCHnrPzoSt2fGgPppRVcBS7B";
        HD hd = new HD("72747bc257a21dee39843101557d19f5f99b147ff705055a1b7b78f4f2de4a61ea0f6a7e73c3328b2a52b84dfe6ceaa0b9ba36622e8b5218fb27881d71f6574d");
        String sender = hd.toWallet().base58Address;

        BigInteger nonce = _client.getNonce(sender).unconfirmedNonce;

        Coin coin = new Coin();

        System.out.println(coin.secretKeyHex());
        System.out.println(coin.publicKeyHex());

        BigInteger amount = new BigInteger("100");

        String payload = Erc20Transfer.getApprovePayload(coin.publicKey(), amount);

        try {
            TransactionRequest tx = new TransactionRequest()
                    .addCommission(gasPrice, gas)
                    .addSender(sender, hd, commission, nonce)
                    .addContractExecution(sender, contract, payload, Sono.zero, gas)
                    .sign();

            debug(tx);

            assert _client.send(tx);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void tokenTransferTest() throws Exception {
        String contract = "SXQesoQbc9dfCHnrPzoSt2fGgPppRVcBS7B";

        String coinPrivKey = "315ce78b8cc357f53cf7b572c76e3f02bc29021885ead5a4745c6b7addba2a7cde7df36b5b3375882fc0abdb6fbc0cf2662907dd2ce26cb2169104dde4b7d616";
        HD hd = new HD(coinPrivKey);
        String sender = hd.toWallet().base58Address;

        String words = "fence attend coil impact hunt cloth split sword hip typical nerve mail dutch rack senior egg march endorse";
        int index = 1;
        Mnemonic mnemonic = new Mnemonic(words);
        HD hd2 = mnemonic.toHD(index);
        String receiver = hd2.toWallet().base58Address;

        BigInteger nonce = _client.getNonce(sender).unconfirmedNonce;

        BigInteger amount = new BigInteger("100");
        String payload = Erc20Transfer.getTransferFromPayload(sender, receiver, amount);
        debug(payload);

        try {
            TransactionRequest tx = new TransactionRequest()
                    .addCommission(gasPrice, gas)
                    .addSender(sender, hd, commission, nonce)
                    .addContractExecution(sender, contract, payload, Sono.zero, gas)
                    .sign();

            debug(tx);

            assert _client.send(tx);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    @Test
    public void tokenAllowanceTest() throws Exception {
        String contract = "SXQesoQbc9dfCHnrPzoSt2fGgPppRVcBS7B";

        HD hd = new HD("72747bc257a21dee39843101557d19f5f99b147ff705055a1b7b78f4f2de4a61ea0f6a7e73c3328b2a52b84dfe6ceaa0b9ba36622e8b5218fb27881d71f6574d");
        String owner = hd.toWallet().base58Address;

        String coinPrivKey = "8cb8d88e1f4f1698980dca6ba9d04bb03ed1af61bba4665b08114400b00829ac64bc812ee4ed6eb5bcd134305a2ba23fbe7387234186e9be9ed2ca8f891ed3a6";
        HD hd2 = new HD(coinPrivKey);
        String spender = hd2.toWallet().base58Address;

        String payload = Erc20Transfer.getAllowancePayload(owner, spender);

        System.out.println(payload);

        try {
            String resp = _client.staticCall(contract, payload);
            BigInteger balance = Payload.toBi(resp);
            System.out.println(balance);
        } catch (Exception e) {
            assert e.getMessage().equals("contract failed");
        }
    }

}
